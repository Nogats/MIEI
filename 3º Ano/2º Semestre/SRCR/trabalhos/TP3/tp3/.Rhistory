# imprimir resultados arredondados
resultados$previsao <- round(resultados$previsao, digits=0)
# calcular o RMSE
rmse(c(teste$quality),c(resultados$previsao))
# treinar a rede neuronal para usar as variaveis xxxx como input e quality como output
rnacredito <- neuralnet( formula05, treino, hidden = c(4), lifesign = "full", threshold = 0.1,rep=1)
# testar a rede com os novos casos
rnacredito.resultados <- compute(rnacredito, teste.05)
# imprimir resultados
resultados <- data.frame(atual = teste$quality, previsao = rnacredito.resultados$net.result)
# imprimir resultados arredondados
resultados$previsao <- round(resultados$previsao, digits=0)
# calcular o RMSE
rmse(c(teste$quality),c(resultados$previsao))
# treinar a rede neuronal para usar as variaveis xxxx como input e quality como output
rnacredito <- neuralnet( formula05, treino, hidden = c(4), lifesign = "full", threshold = 0.1,rep=1)
# testar a rede com os novos casos
rnacredito.resultados <- compute(rnacredito, teste.05)
# imprimir resultados
resultados <- data.frame(atual = teste$quality, previsao = rnacredito.resultados$net.result)
# imprimir resultados arredondados
resultados$previsao <- round(resultados$previsao, digits=0)
# calcular o RMSE
rmse(c(teste$quality),c(resultados$previsao))
# treinar a rede neuronal para usar as variaveis xxxx como input e quality como output
rnacredito <- neuralnet( formula05, treino, hidden = c(4), lifesign = "full", threshold = 0.1,rep=1)
# testar a rede com os novos casos
rnacredito.resultados <- compute(rnacredito, teste.05)
# imprimir resultados
resultados <- data.frame(atual = teste$quality, previsao = rnacredito.resultados$net.result)
# imprimir resultados arredondados
resultados$previsao <- round(resultados$previsao, digits=0)
# calcular o RMSE
rmse(c(teste$quality),c(resultados$previsao))
# treinar a rede neuronal para usar as variaveis xxxx como input e quality como output
rnacredito <- neuralnet( formula06, treino, hidden = c(4), lifesign = "full", threshold = 0.1,rep=1)
# testar a rede com os novos casos
rnacredito.resultados <- compute(rnacredito, teste.06)
# imprimir resultados
resultados <- data.frame(atual = teste$quality, previsao = rnacredito.resultados$net.result)
# imprimir resultados arredondados
resultados$previsao <- round(resultados$previsao, digits=0)
# calcular o RMSE
rmse(c(teste$quality),c(resultados$previsao))
# treinar a rede neuronal para usar as variaveis xxxx como input e quality como output
rnacredito <- neuralnet( formula06, treino, hidden = c(4), lifesign = "full", threshold = 0.1,rep=1)
# testar a rede com os novos casos
rnacredito.resultados <- compute(rnacredito, teste.06)
# imprimir resultados
resultados <- data.frame(atual = teste$quality, previsao = rnacredito.resultados$net.result)
# imprimir resultados arredondados
resultados$previsao <- round(resultados$previsao, digits=0)
# calcular o RMSE
rmse(c(teste$quality),c(resultados$previsao))
# treinar a rede neuronal para usar as variaveis xxxx como input e quality como output
rnacredito <- neuralnet( formula06, treino, hidden = c(4), lifesign = "full", threshold = 0.1,rep=1)
# testar a rede com os novos casos
rnacredito.resultados <- compute(rnacredito, teste.06)
# imprimir resultados
resultados <- data.frame(atual = teste$quality, previsao = rnacredito.resultados$net.result)
# imprimir resultados arredondados
resultados$previsao <- round(resultados$previsao, digits=0)
# calcular o RMSE
rmse(c(teste$quality),c(resultados$previsao))
# treinar a rede neuronal para usar as variaveis xxxx como input e quality como output
rnacredito <- neuralnet( formula06, treino, hidden = c(4), lifesign = "full", threshold = 0.1,rep=1)
library( neuralnet )
library( hydroGOF )
library( leaps )
library( arules )
library( neuralnet )
library( hydroGOF )
library( leaps )
library( arules )
library( neuralnet )
library( hydroGOF )
library( leaps )
library( arules )
# treinar a rede neuronal para usar as variaveis xxxx como input e quality como output
rnacredito <- neuralnet( formula06, treino, hidden = c(4), lifesign = "full", threshold = 0.1,rep=1)
rnacredito.resultados <- compute(rnacredito, teste.06)
# imprimir resultados
resultados <- data.frame(atual = teste$quality, previsao = rnacredito.resultados$net.result)
# imprimir resultados arredondados
resultados$previsao <- round(resultados$previsao, digits=0)
# calcular o RMSE
rmse(c(teste$quality),c(resultados$previsao))
# treinar a rede neuronal para usar as variaveis xxxx como input e quality como output
rnacredito <- neuralnet( formula07, treino, hidden = c(4), lifesign = "full", threshold = 0.1,rep=1)
# treinar a rede neuronal para usar as variaveis xxxx como input e quality como output
rnacredito <- neuralnet( formula07, treino, hidden = c(4), lifesign = "full", threshold = 0.1,rep=1)
# treinar a rede neuronal para usar as variaveis xxxx como input e quality como output
rnacredito <- neuralnet( formula07, treino, hidden = c(4), lifesign = "full", threshold = 0.1,rep=1)
# testar a rede com os novos casos
rnacredito.resultados <- compute(rnacredito, teste.07)
# imprimir resultados
resultados <- data.frame(atual = teste$quality, previsao = rnacredito.resultados$net.result)
# imprimir resultados arredondados
resultados$previsao <- round(resultados$previsao, digits=0)
# calcular o RMSE
rmse(c(teste$quality),c(resultados$previsao))
# treinar a rede neuronal para usar as variaveis xxxx como input e quality como output
rnacredito <- neuralnet( formula08, treino, hidden = c(4), lifesign = "full", threshold = 0.1,rep=1)
# testar a rede com os novos casos
rnacredito.resultados <- compute(rnacredito, teste.08)
# imprimir resultados
resultados <- data.frame(atual = teste$quality, previsao = rnacredito.resultados$net.result)
# imprimir resultados arredondados
resultados$previsao <- round(resultados$previsao, digits=0)
# calcular o RMSE
rmse(c(teste$quality),c(resultados$previsao))
# treinar a rede neuronal para usar as variaveis xxxx como input e quality como output
rnacredito <- neuralnet( formula09, treino, hidden = c(4), lifesign = "full", threshold = 0.1,rep=1)
# testar a rede com os novos casos
rnacredito.resultados <- compute(rnacredito, teste.09)
# imprimir resultados
resultados <- data.frame(atual = teste$quality, previsao = rnacredito.resultados$net.result)
# imprimir resultados arredondados
resultados$previsao <- round(resultados$previsao, digits=0)
# calcular o RMSE
rmse(c(teste$quality),c(resultados$previsao))
# treinar a rede neuronal para usar as variaveis xxxx como input e quality como output
rnacredito <- neuralnet( formula10, treino, hidden = c(4), lifesign = "full", threshold = 0.1,rep=1)
# treinar a rede neuronal para usar as variaveis xxxx como input e quality como output
rnacredito <- neuralnet( formula10, treino, hidden = c(4), lifesign = "full", threshold = 0.1,rep=1)
# testar a rede com os novos casos
rnacredito.resultados <- compute(rnacredito, teste.10)
# imprimir resultados
resultados <- data.frame(atual = teste$quality, previsao = rnacredito.resultados$net.result)
# imprimir resultados arredondados
resultados$previsao <- round(resultados$previsao, digits=0)
# calcular o RMSE
rmse(c(teste$quality),c(resultados$previsao))
# treinar a rede neuronal para usar as variaveis xxxx como input e quality como output
rnacredito <- neuralnet( formula11, treino, hidden = c(4), lifesign = "full", threshold = 0.1,rep=1)
# testar a rede com os novos casos
rnacredito.resultados <- compute(rnacredito, teste.11)
# imprimir resultados
resultados <- data.frame(atual = teste$quality, previsao = rnacredito.resultados$net.result)
# imprimir resultados arredondados
resultados$previsao <- round(resultados$previsao, digits=0)
# calcular o RMSE
rmse(c(teste$quality),c(resultados$previsao))
# treinar a rede neuronal para usar as variaveis xxxx como input e quality como output
rnacredito <- neuralnet( formula11, treino, hidden = c(4), lifesign = "full", threshold = 0.1, algorithm="rprop+", rep=2)
# testar a rede com os novos casos
rnacredito.resultados <- compute(rnacredito, teste.11)
# imprimir resultados
resultados <- data.frame(atual = teste$quality, previsao = rnacredito.resultados$net.result)
# imprimir resultados arredondados
resultados$previsao <- round(resultados$previsao, digits=0)
# calcular o RMSE
rmse(c(teste$quality),c(resultados$previsao))
# treinar a rede neuronal para usar as variaveis xxxx como input e quality como output
rnacredito <- neuralnet( formula11, treino, hidden = c(4), lifesign = "full", threshold = 0.2, algorithm="rprop+", rep=2)
# treinar a rede neuronal para usar as variaveis xxxx como input e quality como output
rnacredito <- neuralnet( formula11, treino, hidden = c(4), lifesign = "full", threshold = 0.2, algorithm="rprop+", rep=1)
# testar a rede com os novos casos
rnacredito.resultados <- compute(rnacredito, teste.11)
# imprimir resultados
resultados <- data.frame(atual = teste$quality, previsao = rnacredito.resultados$net.result)
# imprimir resultados arredondados
resultados$previsao <- round(resultados$previsao, digits=0)
# calcular o RMSE
rmse(c(teste$quality),c(resultados$previsao))
# treinar a rede neuronal para usar as variaveis xxxx como input e quality como output
rnacredito <- neuralnet( formula11, treino, hidden = c(4), lifesign = "full", threshold = 0.05, algorithm="rprop+", rep=1)
# treinar a rede neuronal para usar as variaveis xxxx como input e quality como output
rnacredito <- neuralnet( formula11, treino, hidden = c(4), lifesign = "full", threshold = 0.05, algorithm="rprop+", rep=1)
# treinar a rede neuronal para usar as variaveis xxxx como input e quality como output
rnacredito <- neuralnet( formula11, treino, hidden = c(6), lifesign = "full", threshold = 0.01, algorithm="rprop+", rep=1)
# treinar a rede neuronal para usar as variaveis xxxx como input e quality como output
rnacredito <- neuralnet( formula11, treino, hidden = c(6), lifesign = "full", threshold = 0.1, algorithm="rprop+", rep=1)
# testar a rede com os novos casos
rnacredito.resultados <- compute(rnacredito, teste.11)
# imprimir resultados
resultados <- data.frame(atual = teste$quality, previsao = rnacredito.resultados$net.result)
# imprimir resultados arredondados
resultados$previsao <- round(resultados$previsao, digits=0)
# calcular o RMSE
rmse(c(teste$quality),c(resultados$previsao))
# treinar a rede neuronal para usar as variaveis xxxx como input e quality como output
rnacredito <- neuralnet( formula11, treino, hidden = c(8), lifesign = "full", threshold = 0.1, algorithm="rprop+", rep=1)
# testar a rede com os novos casos
rnacredito.resultados <- compute(rnacredito, teste.11)
# imprimir resultados
resultados <- data.frame(atual = teste$quality, previsao = rnacredito.resultados$net.result)
# imprimir resultados arredondados
resultados$previsao <- round(resultados$previsao, digits=0)
# calcular o RMSE
rmse(c(teste$quality),c(resultados$previsao))
# treinar a rede neuronal para usar as variaveis xxxx como input e quality como output
rnacredito <- neuralnet( formula11, treino, hidden = c(4), lifesign = "full", threshold = 0.1, algorithm="rprop-", rep=1)
library( neuralnet )
library( hydroGOF )
library( leaps )
library( arules )
library( neuralnet )
library( hydroGOF )
library( leaps )
library( arules )
library( neuralnet )
library( hydroGOF )
library( leaps )
library( arules )
# treinar a rede neuronal para usar as variaveis xxxx como input e quality como output
rnacredito <- neuralnet( formula11, treino, hidden = c(4), lifesign = "full", threshold = 0.1, algorithm="rprop-", rep=1)
# treinar a rede neuronal para usar as variaveis xxxx como input e quality como output
rnacredito <- neuralnet( formula11, treino, hidden = c(4), lifesign = "full", threshold = 0.1, algorithm="rprop-", rep=1)
# testar a rede com os novos casos
rnacredito.resultados <- compute(rnacredito, teste.11)
# imprimir resultados
resultados <- data.frame(atual = teste$quality, previsao = rnacredito.resultados$net.result)
# imprimir resultados arredondados
resultados$previsao <- round(resultados$previsao, digits=0)
# calcular o RMSE
rmse(c(teste$quality),c(resultados$previsao))
# treinar a rede neuronal para usar as variaveis xxxx como input e quality como output
rnacredito <- neuralnet( formula11, treino, hidden = c(4), lifesign = "full", threshold = 0.5, algorithm="rprop-", rep=1)
# testar a rede com os novos casos
rnacredito.resultados <- compute(rnacredito, teste.11)
# imprimir resultados
resultados <- data.frame(atual = teste$quality, previsao = rnacredito.resultados$net.result)
# imprimir resultados arredondados
resultados$previsao <- round(resultados$previsao, digits=0)
# calcular o RMSE
rmse(c(teste$quality),c(resultados$previsao))
# treinar a rede neuronal para usar as variaveis xxxx como input e quality como output
rnacredito <- neuralnet( formula11, treino, hidden = c(4), lifesign = "full", threshold = 0.5, algorithm="rprop-", rep=1)
# testar a rede com os novos casos
rnacredito.resultados <- compute(rnacredito, teste.11)
# imprimir resultados
resultados <- data.frame(atual = teste$quality, previsao = rnacredito.resultados$net.result)
# imprimir resultados arredondados
resultados$previsao <- round(resultados$previsao, digits=0)
# calcular o RMSE
rmse(c(teste$quality),c(resultados$previsao))
# treinar a rede neuronal para usar as variaveis xxxx como input e quality como output
rnacredito <- neuralnet( formula11, treino, hidden = c(4), lifesign = "full", threshold = 0.5, algorithm="rprop-", rep=1)
# testar a rede com os novos casos
rnacredito.resultados <- compute(rnacredito, teste.11)
# imprimir resultados
resultados <- data.frame(atual = teste$quality, previsao = rnacredito.resultados$net.result)
# imprimir resultados arredondados
resultados$previsao <- round(resultados$previsao, digits=0)
# calcular o RMSE
rmse(c(teste$quality),c(resultados$previsao))
# treinar a rede neuronal para usar as variaveis xxxx como input e quality como output
rnacredito <- neuralnet( formula11, treino, hidden = c(4), lifesign = "full", threshold = 0.5, algorithm="rprop-", rep=1)
# testar a rede com os novos casos
rnacredito.resultados <- compute(rnacredito, teste.11)
# imprimir resultados
resultados <- data.frame(atual = teste$quality, previsao = rnacredito.resultados$net.result)
# imprimir resultados arredondados
resultados$previsao <- round(resultados$previsao, digits=0)
# calcular o RMSE
rmse(c(teste$quality),c(resultados$previsao))
# treinar a rede neuronal para usar as variaveis xxxx como input e quality como output
rnacredito <- neuralnet( formula11, treino, hidden = c(4), lifesign = "full", threshold = 0.5, algorithm="rprop-", rep=1)
# testar a rede com os novos casos
rnacredito.resultados <- compute(rnacredito, teste.11)
# imprimir resultados
resultados <- data.frame(atual = teste$quality, previsao = rnacredito.resultados$net.result)
# imprimir resultados arredondados
resultados$previsao <- round(resultados$previsao, digits=0)
# calcular o RMSE
rmse(c(teste$quality),c(resultados$previsao))
# treinar a rede neuronal para usar as variaveis xxxx como input e quality como output
rnacredito <- neuralnet( formula11, treino, hidden = c(4), lifesign = "full", threshold = 0.3, algorithm="rprop-", rep=2)
# testar a rede com os novos casos
rnacredito.resultados <- compute(rnacredito, teste.11)
# imprimir resultados
resultados <- data.frame(atual = teste$quality, previsao = rnacredito.resultados$net.result)
# imprimir resultados arredondados
resultados$previsao <- round(resultados$previsao, digits=0)
# calcular o RMSE
rmse(c(teste$quality),c(resultados$previsao))
# treinar a rede neuronal para usar as variaveis xxxx como input e quality como output
rnacredito <- neuralnet( formula11, treino, hidden = c(4), lifesign = "full", threshold = 0.3, algorithm="rprop-", rep=2)
# testar a rede com os novos casos
rnacredito.resultados <- compute(rnacredito, teste.11)
# imprimir resultados
resultados <- data.frame(atual = teste$quality, previsao = rnacredito.resultados$net.result)
# imprimir resultados arredondados
resultados$previsao <- round(resultados$previsao, digits=0)
# calcular o RMSE
rmse(c(teste$quality),c(resultados$previsao))
# treinar a rede neuronal para usar as variaveis xxxx como input e quality como output
rnacredito <- neuralnet( formula11, treino, hidden = c(4), lifesign = "full", threshold = 0.3, algorithm="rprop-", rep=2)
# testar a rede com os novos casos
rnacredito.resultados <- compute(rnacredito, teste.11)
# imprimir resultados
resultados <- data.frame(atual = teste$quality, previsao = rnacredito.resultados$net.result)
# imprimir resultados arredondados
resultados$previsao <- round(resultados$previsao, digits=0)
# calcular o RMSE
rmse(c(teste$quality),c(resultados$previsao))
# treinar a rede neuronal para usar as variaveis xxxx como input e quality como output
rnacredito <- neuralnet( formula11, treino, hidden = c(8), lifesign = "full", threshold = 0.5, algorithm="rprop-", rep=1)
# testar a rede com os novos casos
rnacredito.resultados <- compute(rnacredito, teste.11)
# imprimir resultados
resultados <- data.frame(atual = teste$quality, previsao = rnacredito.resultados$net.result)
# imprimir resultados arredondados
resultados$previsao <- round(resultados$previsao, digits=0)
# calcular o RMSE
rmse(c(teste$quality),c(resultados$previsao))
# treinar a rede neuronal para usar as variaveis xxxx como input e quality como output
rnacredito <- neuralnet( formula11, treino, hidden = c(8), lifesign = "full", threshold = 0.5, algorithm="rprop-", rep=1)
# testar a rede com os novos casos
rnacredito.resultados <- compute(rnacredito, teste.11)
# imprimir resultados
resultados <- data.frame(atual = teste$quality, previsao = rnacredito.resultados$net.result)
# imprimir resultados arredondados
resultados$previsao <- round(resultados$previsao, digits=0)
# calcular o RMSE
rmse(c(teste$quality),c(resultados$previsao))
# treinar a rede neuronal para usar as variaveis xxxx como input e quality como output
rnacredito <- neuralnet( formula11, treino, hidden = c(8), lifesign = "full", threshold = 0.1, algorithm="rprop-", rep=1)
# testar a rede com os novos casos
rnacredito.resultados <- compute(rnacredito, teste.11)
# imprimir resultados
resultados <- data.frame(atual = teste$quality, previsao = rnacredito.resultados$net.result)
# imprimir resultados arredondados
resultados$previsao <- round(resultados$previsao, digits=0)
# calcular o RMSE
rmse(c(teste$quality),c(resultados$previsao))
# treinar a rede neuronal para usar as variaveis xxxx como input e quality como output
rnacredito <- neuralnet( formula11, treino, hidden = c(4), lifesign = "full", threshold = 0.1, algorithm="sag", rep=1)
# treinar a rede neuronal para usar as variaveis xxxx como input e quality como output
rnacredito <- neuralnet( formula11, treino, hidden = c(4), lifesign = "full", threshold = 0.5, algorithm="sag", rep=1)
# treinar a rede neuronal para usar as variaveis xxxx como input e quality como output
rnacredito <- neuralnet( formula11, treino, hidden = c(4), lifesign = "full", threshold = 1, algorithm="sag", rep=1)
# testar a rede com os novos casos
rnacredito.resultados <- compute(rnacredito, teste.11)
# imprimir resultados
resultados <- data.frame(atual = teste$quality, previsao = rnacredito.resultados$net.result)
# imprimir resultados arredondados
resultados$previsao <- round(resultados$previsao, digits=0)
# calcular o RMSE
rmse(c(teste$quality),c(resultados$previsao))
# treinar a rede neuronal para usar as variaveis xxxx como input e quality como output
rnacredito <- neuralnet( formula11, treino, hidden = c(8), lifesign = "full", threshold = 0.8, algorithm="sag", rep=1)
# testar a rede com os novos casos
rnacredito.resultados <- compute(rnacredito, teste.11)
# imprimir resultados
resultados <- data.frame(atual = teste$quality, previsao = rnacredito.resultados$net.result)
# imprimir resultados arredondados
resultados$previsao <- round(resultados$previsao, digits=0)
# calcular o RMSE
rmse(c(teste$quality),c(resultados$previsao))
# treinar a rede neuronal para usar as variaveis xxxx como input e quality como output
rnacredito <- neuralnet( formula11, treino, hidden = c(4), lifesign = "full", threshold = 0.1, algorithm="slr", rep=1)
# treinar a rede neuronal para usar as variaveis xxxx como input e quality como output
rnacredito <- neuralnet( formula4, treino, hidden = c(4), lifesign = "full", threshold = 0.1, algorithm="rprop+", rep=1)
# treinar a rede neuronal para usar as variaveis xxxx como input e quality como output
rnacredito <- neuralnet( formula04, treino, hidden = c(4), lifesign = "full", threshold = 0.1, algorithm="rprop+", rep=1)
# testar a rede com os novos casos
rnacredito.resultados <- compute(rnacredito, teste.4)
# imprimir resultados
resultados <- data.frame(atual = teste$quality, previsao = rnacredito.resultados$net.result)
# testar a rede com os novos casos
rnacredito.resultados <- compute(rnacredito, teste.04)
# imprimir resultados
resultados <- data.frame(atual = teste$quality, previsao = rnacredito.resultados$net.result)
# imprimir resultados arredondados
resultados$previsao <- round(resultados$previsao, digits=0)
# calcular o RMSE
rmse(c(teste$quality),c(resultados$previsao))
# treinar a rede neuronal para usar as variaveis xxxx como input e quality como output
rnacredito <- neuralnet( formula04, treino, hidden = c(4), lifesign = "full", threshold = 0.2, algorithm="rprop+", rep=2)
# testar a rede com os novos casos
rnacredito.resultados <- compute(rnacredito, teste.04)
# imprimir resultados
resultados <- data.frame(atual = teste$quality, previsao = rnacredito.resultados$net.result)
# imprimir resultados arredondados
resultados$previsao <- round(resultados$previsao, digits=0)
# calcular o RMSE
rmse(c(teste$quality),c(resultados$previsao))
# treinar a rede neuronal para usar as variaveis xxxx como input e quality como output
rnacredito <- neuralnet( formula04, treino, hidden = c(4), lifesign = "full", threshold = 0.5, algorithm="rprop+", rep=1)
# testar a rede com os novos casos
rnacredito.resultados <- compute(rnacredito, teste.04)
# imprimir resultados
resultados <- data.frame(atual = teste$quality, previsao = rnacredito.resultados$net.result)
# imprimir resultados arredondados
resultados$previsao <- round(resultados$previsao, digits=0)
# calcular o RMSE
rmse(c(teste$quality),c(resultados$previsao))
# treinar a rede neuronal para usar as variaveis xxxx como input e quality como output
rnacredito <- neuralnet( formula04, treino, hidden = c(4), lifesign = "full", threshold = 0.05, algorithm="rprop+", rep=2)
# treinar a rede neuronal para usar as variaveis xxxx como input e quality como output
rnacredito <- neuralnet( formula04, treino, hidden = c(4), lifesign = "full", threshold = 0.05, algorithm="rprop+", rep=2)
# treinar a rede neuronal para usar as variaveis xxxx como input e quality como output
rnacredito <- neuralnet( formula04, treino, hidden = c(4), lifesign = "full", threshold = 0.05, algorithm="rprop+", rep=1)
# testar a rede com os novos casos
rnacredito.resultados <- compute(rnacredito, teste.04)
# imprimir resultados
resultados <- data.frame(atual = teste$quality, previsao = rnacredito.resultados$net.result)
# imprimir resultados arredondados
resultados$previsao <- round(resultados$previsao, digits=0)
# calcular o RMSE
rmse(c(teste$quality),c(resultados$previsao))
# treinar a rede neuronal para usar as variaveis xxxx como input e quality como output
rnacredito <- neuralnet( formula04, treino, hidden = c(6), lifesign = "full", threshold = 0.1, algorithm="rprop+", rep=2)
# treinar a rede neuronal para usar as variaveis xxxx como input e quality como output
rnacredito <- neuralnet( formula04, treino, hidden = c(6), lifesign = "full", threshold = 0.1, algorithm="rprop+", rep=2)
# testar a rede com os novos casos
rnacredito.resultados <- compute(rnacredito, teste.04)
# imprimir resultados
resultados <- data.frame(atual = teste$quality, previsao = rnacredito.resultados$net.result)
# imprimir resultados arredondados
resultados$previsao <- round(resultados$previsao, digits=0)
# calcular o RMSE
rmse(c(teste$quality),c(resultados$previsao))
# treinar a rede neuronal para usar as variaveis xxxx como input e quality como output
rnacredito <- neuralnet( formula04, treino, hidden = c(6), lifesign = "full", threshold = 0.01, algorithm="rprop+", rep=1)
# testar a rede com os novos casos
rnacredito.resultados <- compute(rnacredito, teste.04)
# imprimir resultados
resultados <- data.frame(atual = teste$quality, previsao = rnacredito.resultados$net.result)
# imprimir resultados arredondados
resultados$previsao <- round(resultados$previsao, digits=0)
# calcular o RMSE
rmse(c(teste$quality),c(resultados$previsao))
# treinar a rede neuronal para usar as variaveis xxxx como input e quality como output
rnacredito <- neuralnet( formula04, treino, hidden = c(10), lifesign = "full", threshold = 0.01, algorithm="rprop+", rep=1)
# treinar a rede neuronal para usar as variaveis xxxx como input e quality como output
rnacredito <- neuralnet( formula04, treino, hidden = c(10), lifesign = "full", threshold = 0.01, algorithm="rprop+", rep=1)
# treinar a rede neuronal para usar as variaveis xxxx como input e quality como output
rnacredito <- neuralnet( formula04, treino, hidden = c(10), lifesign = "full", threshold = 0.01, algorithm="rprop+", rep=1)
# treinar a rede neuronal para usar as variaveis xxxx como input e quality como output
rnacredito <- neuralnet( formula04, treino, hidden = c(4), lifesign = "full", threshold = 0.1, algorithm="rprop-", rep=1)
# testar a rede com os novos casos
rnacredito.resultados <- compute(rnacredito, teste.04)
# imprimir resultados
resultados <- data.frame(atual = teste$quality, previsao = rnacredito.resultados$net.result)
# imprimir resultados arredondados
resultados$previsao <- round(resultados$previsao, digits=0)
# calcular o RMSE
rmse(c(teste$quality),c(resultados$previsao))
# treinar a rede neuronal para usar as variaveis xxxx como input e quality como output
rnacredito <- neuralnet( formula04, treino, hidden = c(5), lifesign = "full", threshold = 0.05, algorithm="rprop-", rep=2)
# testar a rede com os novos casos
rnacredito.resultados <- compute(rnacredito, teste.04)
# imprimir resultados
resultados <- data.frame(atual = teste$quality, previsao = rnacredito.resultados$net.result)
# imprimir resultados arredondados
resultados$previsao <- round(resultados$previsao, digits=0)
# calcular o RMSE
rmse(c(teste$quality),c(resultados$previsao))
# treinar a rede neuronal para usar as variaveis xxxx como input e quality como output
rnacredito <- neuralnet( formula04, treino, hidden = c(4), lifesign = "full", threshold = 0.03, algorithm="rprop-", rep=2)
# treinar a rede neuronal para usar as variaveis xxxx como input e quality como output
rnacredito <- neuralnet( formula04, treino, hidden = c(4), lifesign = "full", threshold = 0.03, algorithm="rprop-", rep=1)
# testar a rede com os novos casos
rnacredito.resultados <- compute(rnacredito, teste.04)
# imprimir resultados
resultados <- data.frame(atual = teste$quality, previsao = rnacredito.resultados$net.result)
# imprimir resultados arredondados
resultados$previsao <- round(resultados$previsao, digits=0)
# calcular o RMSE
rmse(c(teste$quality),c(resultados$previsao))
# treinar a rede neuronal para usar as variaveis xxxx como input e quality como output
rnacredito <- neuralnet( formula04, treino, hidden = c(4), lifesign = "full", threshold = 0.1, algorithm="sag", rep=1)
# treinar a rede neuronal para usar as variaveis xxxx como input e quality como output
rnacredito <- neuralnet( formula04, treino, hidden = c(4), lifesign = "full", threshold = 0.5, algorithm="sag", rep=1)
# testar a rede com os novos casos
rnacredito.resultados <- compute(rnacredito, teste.04)
# imprimir resultados
resultados <- data.frame(atual = teste$quality, previsao = rnacredito.resultados$net.result)
# imprimir resultados arredondados
resultados$previsao <- round(resultados$previsao, digits=0)
# calcular o RMSE
rmse(c(teste$quality),c(resultados$previsao))
# treinar a rede neuronal para usar as variaveis xxxx como input e quality como output
rnacredito <- neuralnet( formula04, treino, hidden = c(6), lifesign = "full", threshold = 0.3, algorithm="sag", rep=1)
# treinar a rede neuronal para usar as variaveis xxxx como input e quality como output
rnacredito <- neuralnet( formula04, treino, hidden = c(6), lifesign = "full", threshold = 0.3, algorithm="sag", rep=1)
# treinar a rede neuronal para usar as variaveis xxxx como input e quality como output
rnacredito <- neuralnet( formula04, treino, hidden = c(8), lifesign = "full", threshold = 0.5, algorithm="sag", rep=2)
# treinar a rede neuronal para usar as variaveis xxxx como input e quality como output
rnacredito <- neuralnet( formula04, treino, hidden = c(4), lifesign = "full", threshold = 0.1, algorithm="slr", rep=1)
# treinar a rede neuronal para usar as variaveis xxxx como input e quality como output
rnacredito <- neuralnet( formula04, treino, hidden = c(6,4,2), lifesign = "full", threshold = 0.1, algorithm="slr", rep=1)
# treinar a rede neuronal para usar as variaveis xxxx como input e quality como output
rnacredito <- neuralnet( formula04, treino, hidden = c(4), lifesign = "full", threshold = 0.1, algorithm="slr", rep=1)
# treinar a rede neuronal para usar as variaveis xxxx como input e quality como output
rnacredito <- neuralnet( formula04, treino, hidden = c(4), lifesign = "full", threshold = 0.2, algorithm="slr", rep=1)
# treinar a rede neuronal para usar as variaveis xxxx como input e quality como output
rnacredito <- neuralnet( formula04, treino, hidden = c(4), lifesign = "full", threshold = 0.3, algorithm="slr", rep=1)
# testar a rede com os novos casos
rnacredito.resultados <- compute(rnacredito, teste.04)
# imprimir resultados
resultados <- data.frame(atual = teste$quality, previsao = rnacredito.resultados$net.result)
# imprimir resultados arredondados
resultados$previsao <- round(resultados$previsao, digits=0)
# calcular o RMSE
rmse(c(teste$quality),c(resultados$previsao))
# treinar a rede neuronal para usar as variaveis xxxx como input e quality como output
rnacredito <- neuralnet( formula04, treino, hidden = c(8), lifesign = "full", threshold = 0.3, algorithm="slr", rep=1)
# testar a rede com os novos casos
rnacredito.resultados <- compute(rnacredito, teste.04)
# imprimir resultados
resultados <- data.frame(atual = teste$quality, previsao = rnacredito.resultados$net.result)
# imprimir resultados arredondados
resultados$previsao <- round(resultados$previsao, digits=0)
# calcular o RMSE
rmse(c(teste$quality),c(resultados$previsao))
# dataset do vinho branco
dados <- read.csv("C:\\Users\\Utilizador\\Desktop\\SRCR\\tp3\\winequality\\white.csv",header=TRUE, sep=";",dec=".")
View(dados)
